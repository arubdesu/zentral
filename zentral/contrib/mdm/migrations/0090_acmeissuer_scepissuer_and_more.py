# Generated by Django 4.2.23 on 2025-09-01 10:18

import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


def migrate_scep_configs(apps, schema_editor):
    try:
        SCEPConfig = apps.get_model("mdm", "SCEPConfig")
        SCEPIssuer = apps.get_model("mdm", "SCEPIssuer")
        DEPEnrollment = apps.get_model("mdm", "DEPEnrollment")
        OTAEnrollment = apps.get_model("mdm", "OTAEnrollment")
        UserEnrollment = apps.get_model("mdm", "UserEnrollment")
        from zentral.contrib.mdm.cert_issuer_backends import (
            CertIssuerBackend,
            get_cert_issuer_backend,
        )
        from zentral.core.secret_engines import decrypt_str
    except Exception:
        return
    scep_issuers = {}
    for scep_config in SCEPConfig.objects.all():
        scep_issuer = SCEPIssuer(
            pk=uuid.uuid4(),
            provisioning_uid=scep_config.provisioning_uid,
            name=scep_config.name,
            description="",
            url=scep_config.url,
            key_usage=scep_config.key_usage,
            key_size=scep_config.keysize,
        )
        challenge_kwargs = scep_config.challenge_kwargs
        if scep_config.challenge_type == "STATIC":
            scep_issuer.backend = CertIssuerBackend.StaticChallenge
            kwargs = {
                "challenge": decrypt_str(
                    challenge_kwargs["challenge"],
                    name=scep_config.name,
                    model="mdm.scepconfig",
                    field="challenge_kwargs.challenge",
                )
            }
        else:
            kwargs = {
                "url": challenge_kwargs["url"],
                "username": challenge_kwargs["username"],
                "password": decrypt_str(
                    challenge_kwargs["password"],
                    name=scep_config.name,
                    model="mdm.scepconfig",
                    field="challenge_kwargs.password",
                ),
            }
            if scep_config.challenge_type == "MICROSOFT_CA":
                scep_issuer.backend = CertIssuerBackend.MicrosoftCA
            elif scep_config.challenge_type == "OKTA_CA":
                scep_issuer.backend = CertIssuerBackend.OktaCA
        scep_issuer_backend = get_cert_issuer_backend(scep_issuer)
        scep_issuer_backend.set_kwargs(kwargs)
        scep_issuer.save()
        scep_issuers[scep_config.pk] = scep_issuer
    for model in (DEPEnrollment, OTAEnrollment, UserEnrollment):
        for obj in model.objects.all():
            obj.scep_issuer = scep_issuers[obj.scep_config.pk]
            # we keep obj.scep_config for the app instances that are still not updated
            obj.save()


class Migration(migrations.Migration):

    dependencies = [
        ("mdm", "0089_enrollmentcustomview_depenrollmentcustomview"),
    ]

    operations = [
        migrations.CreateModel(
            name="ACMEIssuer",
            fields=[
                ("name", models.CharField(unique=True)),
                ("description", models.TextField(blank=True)),
                ("backend_kwargs", models.JSONField(default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "provisioning_uid",
                    models.CharField(
                        editable=False, max_length=256, null=True, unique=True
                    ),
                ),
                (
                    "backend",
                    models.CharField(
                        choices=[
                            ("IDENT", "IDent"),
                            ("MICROSOFT_CA", "Microsoft CA"),
                            ("OKTA_CA", "Okta CA"),
                            ("STATIC_CHALLENGE", "Static challenge"),
                        ]
                    ),
                ),
                ("version", models.PositiveIntegerField(default=1, editable=False)),
                ("directory_url", models.URLField()),
                ("key_size", models.PositiveIntegerField()),
                (
                    "key_type",
                    models.CharField(
                        choices=[
                            ("RSA", "RSA"),
                            ("ECSECPrimeRandom", "ECSECPrimeRandom"),
                        ]
                    ),
                ),
                (
                    "usage_flags",
                    models.IntegerField(
                        choices=[
                            (0, "None (0)"),
                            (1, "Signing (1)"),
                            (4, "Encryption (4)"),
                            (5, "Signing & Encryption (1 | 4 = 5)"),
                        ],
                        default=0,
                        help_text="A bitmask indicating the use of the key.",
                    ),
                ),
                (
                    "extended_key_usage",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(
                            validators=[django.core.validators.MinLengthValidator(3)]
                        ),
                        blank=True,
                        default=list,
                        size=None,
                    ),
                ),
                ("hardware_bound", models.BooleanField(default=True)),
                ("attest", models.BooleanField(default=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="SCEPIssuer",
            fields=[
                ("name", models.CharField(unique=True)),
                ("description", models.TextField(blank=True)),
                ("backend_kwargs", models.JSONField(default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "provisioning_uid",
                    models.CharField(
                        editable=False, max_length=256, null=True, unique=True
                    ),
                ),
                (
                    "backend",
                    models.CharField(
                        choices=[
                            ("IDENT", "IDent"),
                            ("MICROSOFT_CA", "Microsoft CA"),
                            ("OKTA_CA", "Okta CA"),
                            ("STATIC_CHALLENGE", "Static challenge"),
                        ]
                    ),
                ),
                ("version", models.PositiveIntegerField(default=1, editable=False)),
                ("url", models.URLField()),
                (
                    "key_size",
                    models.IntegerField(
                        choices=[
                            (1024, "1024-bit"),
                            (2048, "2048-bit"),
                            (4096, "4096-bit"),
                        ],
                        default=2048,
                    ),
                ),
                (
                    "key_usage",
                    models.IntegerField(
                        choices=[
                            (0, "None (0)"),
                            (1, "Signing (1)"),
                            (4, "Encryption (4)"),
                            (5, "Signing & Encryption (1 | 4 = 5)"),
                        ],
                        default=0,
                        help_text="A bitmask indicating the use of the key.",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AlterField(
            model_name="depenrollment",
            name="scep_config",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="mdm.scepconfig",
            ),
        ),
        migrations.AlterField(
            model_name="otaenrollment",
            name="scep_config",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="mdm.scepconfig",
            ),
        ),
        migrations.AlterField(
            model_name="userenrollment",
            name="scep_config",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="mdm.scepconfig",
            ),
        ),
        migrations.AddField(
            model_name="depenrollment",
            name="acme_issuer",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="mdm.acmeissuer",
                verbose_name="ACME issuer",
            ),
        ),
        migrations.AddField(
            model_name="depenrollment",
            name="scep_issuer",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="mdm.scepissuer",
                verbose_name="SCEP issuer",
            ),
        ),
        migrations.AddField(
            model_name="otaenrollment",
            name="acme_issuer",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="mdm.acmeissuer",
                verbose_name="ACME issuer",
            ),
        ),
        migrations.AddField(
            model_name="otaenrollment",
            name="scep_issuer",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="mdm.scepissuer",
                verbose_name="SCEP issuer",
            ),
        ),
        migrations.AddField(
            model_name="userenrollment",
            name="acme_issuer",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="mdm.acmeissuer",
                verbose_name="ACME issuer",
            ),
        ),
        migrations.AddField(
            model_name="userenrollment",
            name="scep_issuer",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="mdm.scepissuer",
                verbose_name="SCEP issuer",
            ),
        ),
        migrations.AlterField(
            model_name="depenrollment",
            name="scep_verification",
            field=models.BooleanField(null=True),
        ),
        migrations.AlterField(
            model_name="otaenrollment",
            name="scep_verification",
            field=models.BooleanField(null=True),
        ),
        migrations.AlterField(
            model_name="userenrollment",
            name="scep_verification",
            field=models.BooleanField(null=True),
        ),
        migrations.RunPython(migrate_scep_configs),
        migrations.AlterField(
            model_name="depenrollment",
            name="scep_issuer",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                to="mdm.scepissuer",
                verbose_name="SCEP issuer",
            ),
        ),
        migrations.AlterField(
            model_name="otaenrollment",
            name="scep_issuer",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                to="mdm.scepissuer",
                verbose_name="SCEP issuer",
            ),
        ),
        migrations.AlterField(
            model_name="userenrollment",
            name="scep_issuer",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                to="mdm.scepissuer",
                verbose_name="SCEP issuer",
            ),
        ),
        migrations.AddField(
            model_name="enrolleddevice",
            name="cert_att_serial_number",
            field=models.TextField(null=True),
        ),
        migrations.AddField(
            model_name="enrolleddevice",
            name="cert_att_udid",
            field=models.TextField(null=True),
        ),
        migrations.AlterField(
            model_name="depenrollmentsession",
            name="status",
            field=models.CharField(
                choices=[
                    ("STARTED", "Started"),
                    ("AUTHENTICATED", "Authenticated"),
                    ("COMPLETED", "Completed"),
                ],
                max_length=64,
            ),
        ),
        migrations.AlterField(
            model_name="otaenrollmentsession",
            name="status",
            field=models.CharField(
                choices=[
                    ("PHASE_1", "Phase 1"),
                    ("PHASE_2", "Phase 2"),
                    ("PHASE_3", "Phase 3"),
                    ("AUTHENTICATED", "Authenticated"),
                    ("COMPLETED", "Completed"),
                ],
                max_length=64,
            ),
        ),
        migrations.AlterField(
            model_name="reenrollmentsession",
            name="status",
            field=models.CharField(
                choices=[
                    ("STARTED", "Started"),
                    ("AUTHENTICATED", "Authenticated"),
                    ("COMPLETED", "Completed"),
                ],
                max_length=64,
            ),
        ),
        migrations.AlterField(
            model_name="userenrollmentsession",
            name="status",
            field=models.CharField(
                choices=[
                    ("ACCOUNT_DRIVEN_START", "Account-based onboarding initiated"),
                    (
                        "ACCOUNT_DRIVEN_AUTHENTICATED",
                        "Account-based onboarding authenticated",
                    ),
                    ("STARTED", "Started"),
                    ("AUTHENTICATED", "Authenticated"),
                    ("COMPLETED", "Completed"),
                ],
                max_length=64,
            ),
        ),
    ]
